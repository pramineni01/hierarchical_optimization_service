# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import optopy_pb2 as optopy__pb2
import optorun_pb2 as optorun__pb2
import tasks_pb2 as tasks__pb2


class OptoRunServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OptoRun = channel.unary_unary(
                '/optorunpb.OptoRunService/OptoRun',
                request_serializer=optorun__pb2.OptoRunRequest.SerializeToString,
                response_deserializer=optorun__pb2.OptoRunResponse.FromString,
                )
        self.OptoRunStreaming = channel.stream_stream(
                '/optorunpb.OptoRunService/OptoRunStreaming',
                request_serializer=optorun__pb2.OptoRunRequest.SerializeToString,
                response_deserializer=optorun__pb2.OptoRunResponse.FromString,
                )
        self.OptoRunStreamingParallel = channel.stream_stream(
                '/optorunpb.OptoRunService/OptoRunStreamingParallel',
                request_serializer=optorun__pb2.OptoRunRequest.SerializeToString,
                response_deserializer=optorun__pb2.OptoRunResponse.FromString,
                )
        self.OptoStreamingTask = channel.stream_stream(
                '/optorunpb.OptoRunService/OptoStreamingTask',
                request_serializer=tasks__pb2.Task.SerializeToString,
                response_deserializer=tasks__pb2.TaskResult.FromString,
                )
        self.OptoTask = channel.unary_unary(
                '/optorunpb.OptoRunService/OptoTask',
                request_serializer=tasks__pb2.Task.SerializeToString,
                response_deserializer=tasks__pb2.TaskResult.FromString,
                )
        self.OptimizeUnary = channel.unary_unary(
                '/optorunpb.OptoRunService/OptimizeUnary',
                request_serializer=optopy__pb2.OptopyRequest.SerializeToString,
                response_deserializer=optopy__pb2.OptopyResponse.FromString,
                )
        self.OptimizeStreaming = channel.stream_stream(
                '/optorunpb.OptoRunService/OptimizeStreaming',
                request_serializer=optopy__pb2.OptopyRequest.SerializeToString,
                response_deserializer=optopy__pb2.OptopyResponse.FromString,
                )
        self.OptimizeStreamingParallel = channel.stream_stream(
                '/optorunpb.OptoRunService/OptimizeStreamingParallel',
                request_serializer=optopy__pb2.OptopyRequest.SerializeToString,
                response_deserializer=optopy__pb2.OptopyResponse.FromString,
                )


class OptoRunServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OptoRun(self, request, context):
        """Unary 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OptoRunStreaming(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OptoRunStreamingParallel(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OptoStreamingTask(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OptoTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OptimizeUnary(self, request, context):
        """Unary Old interface
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OptimizeStreaming(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OptimizeStreamingParallel(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OptoRunServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OptoRun': grpc.unary_unary_rpc_method_handler(
                    servicer.OptoRun,
                    request_deserializer=optorun__pb2.OptoRunRequest.FromString,
                    response_serializer=optorun__pb2.OptoRunResponse.SerializeToString,
            ),
            'OptoRunStreaming': grpc.stream_stream_rpc_method_handler(
                    servicer.OptoRunStreaming,
                    request_deserializer=optorun__pb2.OptoRunRequest.FromString,
                    response_serializer=optorun__pb2.OptoRunResponse.SerializeToString,
            ),
            'OptoRunStreamingParallel': grpc.stream_stream_rpc_method_handler(
                    servicer.OptoRunStreamingParallel,
                    request_deserializer=optorun__pb2.OptoRunRequest.FromString,
                    response_serializer=optorun__pb2.OptoRunResponse.SerializeToString,
            ),
            'OptoStreamingTask': grpc.stream_stream_rpc_method_handler(
                    servicer.OptoStreamingTask,
                    request_deserializer=tasks__pb2.Task.FromString,
                    response_serializer=tasks__pb2.TaskResult.SerializeToString,
            ),
            'OptoTask': grpc.unary_unary_rpc_method_handler(
                    servicer.OptoTask,
                    request_deserializer=tasks__pb2.Task.FromString,
                    response_serializer=tasks__pb2.TaskResult.SerializeToString,
            ),
            'OptimizeUnary': grpc.unary_unary_rpc_method_handler(
                    servicer.OptimizeUnary,
                    request_deserializer=optopy__pb2.OptopyRequest.FromString,
                    response_serializer=optopy__pb2.OptopyResponse.SerializeToString,
            ),
            'OptimizeStreaming': grpc.stream_stream_rpc_method_handler(
                    servicer.OptimizeStreaming,
                    request_deserializer=optopy__pb2.OptopyRequest.FromString,
                    response_serializer=optopy__pb2.OptopyResponse.SerializeToString,
            ),
            'OptimizeStreamingParallel': grpc.stream_stream_rpc_method_handler(
                    servicer.OptimizeStreamingParallel,
                    request_deserializer=optopy__pb2.OptopyRequest.FromString,
                    response_serializer=optopy__pb2.OptopyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'optorunpb.OptoRunService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OptoRunService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OptoRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/optorunpb.OptoRunService/OptoRun',
            optorun__pb2.OptoRunRequest.SerializeToString,
            optorun__pb2.OptoRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OptoRunStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/optorunpb.OptoRunService/OptoRunStreaming',
            optorun__pb2.OptoRunRequest.SerializeToString,
            optorun__pb2.OptoRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OptoRunStreamingParallel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/optorunpb.OptoRunService/OptoRunStreamingParallel',
            optorun__pb2.OptoRunRequest.SerializeToString,
            optorun__pb2.OptoRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OptoStreamingTask(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/optorunpb.OptoRunService/OptoStreamingTask',
            tasks__pb2.Task.SerializeToString,
            tasks__pb2.TaskResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OptoTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/optorunpb.OptoRunService/OptoTask',
            tasks__pb2.Task.SerializeToString,
            tasks__pb2.TaskResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OptimizeUnary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/optorunpb.OptoRunService/OptimizeUnary',
            optopy__pb2.OptopyRequest.SerializeToString,
            optopy__pb2.OptopyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OptimizeStreaming(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/optorunpb.OptoRunService/OptimizeStreaming',
            optopy__pb2.OptopyRequest.SerializeToString,
            optopy__pb2.OptopyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OptimizeStreamingParallel(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/optorunpb.OptoRunService/OptimizeStreamingParallel',
            optopy__pb2.OptopyRequest.SerializeToString,
            optopy__pb2.OptopyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
